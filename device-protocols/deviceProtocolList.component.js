"use strict";function _toConsumableArray(o){return _arrayWithoutHoles(o)||_iterableToArray(o)||_unsupportedIterableToArray(o)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(o,r){if(o){if("string"==typeof o)return _arrayLikeToArray(o,r);var t=Object.prototype.toString.call(o).slice(8,-1);return"Object"===t&&o.constructor&&(t=o.constructor.name),"Map"===t||"Set"===t?Array.from(o):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(o,r):void 0}}function _iterableToArray(o){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(o))return Array.from(o)}function _arrayWithoutHoles(o){if(Array.isArray(o))return _arrayLikeToArray(o)}function _arrayLikeToArray(o,r){(null==r||r>o.length)&&(r=o.length);for(var t=0,e=new Array(r);t<r;t++)e[t]=o[t];return e}!function(){function o(r,t){var e=this;function o(){i(!(e.protocols=void 0)),t.listProtocols().then(n).finally(_.partial(i,!1))}function n(o){e.protocols||(e.protocols=[]),r.paging=o.paging||{refresh:!0},e.protocols=[].concat(_toConsumableArray(e.protocols),_toConsumableArray(o)),a(e.protocols)}function i(o){e.mainView&&(e.mainView.isLoading=o)}function a(o){e.mainView&&(e.mainView.isEmpty=0===_.get(o,"length"))}_.assign(e,{$onInit:function(){o(),e.mainView&&(e.mainView.refresh=o)},edit:t.edit,remove:function(o){return t.remove(o).then(function(){return _.pull(e.protocols,o)}).then(function(){return a(e.protocols)})},CONFIG:t.VIEW_CONFIG,getTitle:t.getProtocolName,getProtocolActionsMemoized:_.memoize(t.getActionsForProtocol,_.property("id")),getRowInfoComponent:t.getProtocolRowInfoComponent}),r.paging={},r.loadNext=function(){r.paging.loading=!0,r.paging.next().then(n).finally(function(){r.paging.loading=!1})}}o.$inject=["$scope","c8yDeviceProtocolUi"],angular.module("c8y.deviceProtocols").component("c8yDeviceProtocolList",{templateUrl:":::PLUGIN_PATH:::/deviceProtocolList.html",controllerAs:"vm",require:{mainView:"?^c8yDeviceProtocolView"},controller:o,bindings:{filter:"<",onList:"&"}})}();